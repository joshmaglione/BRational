{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BRational \u2003 The goal of BRational is to format certain rational functions in SageMath to enable users to think entirely about their own work and interests and not about formatting. \u2002 Install The simplest way to install BRational is to run the following in a terminal: $ sage --pip install brational or in SageMath: sage: %pip install brational Alternatively, one can download the latest release and unzip it into a directory that SageMath can find for importing. \u2002 Update To update an older version of BRational to the latest version, run the following in a terminal: $ sage --pip install brational --upgrade or in SageMath: sage: %pip install brational --upgrade BRational has no external dependencies and is compatible with SageMath 9.6 and later. It may work just fine with earlier versions of SageMath, but these have not been tested. \u2002 Uninstall Assuming you installed BRational by using pip (see Install ), then you can run one of the following in a terminal: $ sage --pip uninstall brational or in SageMath: sage: %pip uninstall brational \u2002 Importing Import BRational during your SageMath run with the following import brational as br Throughout this documentation, we use br for the reference name of brational . \u2002 Citing If you have used BRational and would like to cite us, please adapt the following to your style. Joshua Maglione, BRational: Beautiful formatting of rational functions , version 2.0.1, 2025, https://github.com/joshmaglione/BRational. BibTeX format: @misc{BRational, author = {Joshua Maglione}, title = {{BR}ational: {B}eautiful formatting of rational functions, version 2.0.1}, note = {\\url{https://github.com/joshmaglione/BRational}}, year = {2025}, }","title":"Home"},{"location":"#brational","text":"The goal of BRational is to format certain rational functions in SageMath to enable users to think entirely about their own work and interests and not about formatting.","title":"BRational"},{"location":"#install","text":"The simplest way to install BRational is to run the following in a terminal: $ sage --pip install brational or in SageMath: sage: %pip install brational Alternatively, one can download the latest release and unzip it into a directory that SageMath can find for importing.","title":"Install"},{"location":"#update","text":"To update an older version of BRational to the latest version, run the following in a terminal: $ sage --pip install brational --upgrade or in SageMath: sage: %pip install brational --upgrade BRational has no external dependencies and is compatible with SageMath 9.6 and later. It may work just fine with earlier versions of SageMath, but these have not been tested.","title":"Update"},{"location":"#uninstall","text":"Assuming you installed BRational by using pip (see Install ), then you can run one of the following in a terminal: $ sage --pip uninstall brational or in SageMath: sage: %pip uninstall brational","title":"Uninstall"},{"location":"#importing","text":"Import BRational during your SageMath run with the following import brational as br Throughout this documentation, we use br for the reference name of brational .","title":"Importing"},{"location":"#citing","text":"If you have used BRational and would like to cite us, please adapt the following to your style. Joshua Maglione, BRational: Beautiful formatting of rational functions , version 2.0.1, 2025, https://github.com/joshmaglione/BRational. BibTeX format: @misc{BRational, author = {Joshua Maglione}, title = {{BR}ational: {B}eautiful formatting of rational functions, version 2.0.1}, note = {\\url{https://github.com/joshmaglione/BRational}}, year = {2025}, }","title":"Citing"},{"location":"brat-methods/","text":"Methods (brat) \u2003 We describe all of the methods associated with the class brat and provide examples. \u2002 .change_denominator Given a polynomial\u2014or data equivalent to a polynomial (see arguments)\u2014returns a new brat , equal to the original, whose denominator is the given polynomial. (Ordered) keyword arguments: expression : the polynomial expression. Default: None . signature : the signature for the polynomial expression. See denominator signature method. Default: None . Example We construct the following rational function: [ H = \\dfrac{(1 + x^3)(1 + x^4)(1 + x^5)}{(1 - x)(1 - x^2)(1 - x^3)^2(1 - x^4)(1 - x^5)} ] from a simplified expression. Then we recover this particular expression using change_denominator . sage: x = polygens(QQ, 'x')[0] sage: h = (1 + x^3)*(1 + x^4)*(1 + x^5)/((1 - x)*(1 - x^2)*(1 - x^3)^2*(1 - x^4)*(1 - x^5)) sage: h (x^10 - 2*x^9 + 3*x^8 - 3*x^7 + 4*x^6 - 4*x^5 + 4*x^4 - 3*x^3 + 3*x^2 - 2*x + 1)/(x^16 - 3*x^15 + 4*x^14 - 6*x^ 13 + 9*x^12 - 10*x^11 + 12*x^10 - 13*x^9 + 12*x^8 - 13*x^7 + 12*x^6 - 10*x^5 + 9*x^4 - 6*x^3 + 4*x^2 - 3*x + 1) sage: H = br.brat(h) sage: H (1 - 2*x + 2*x^2 - x^3 + x^4 - x^5 + x^7 - x^8 + x^9 - 2*x^10 + 2*x^11 - x^12)/((1 - x)^3*(1 - x^3)^2*(1 - x^4) *(1 - x^5)) Note that the denominator is $(1 - x)^3(1 - x^3)^2(1 - x^4)(1 - x^5)$, which is not exactly what we want. sage: H.change_denominator( (1 - x) * (1 - x^2) * (1 - x^3)^2 * (1 - x^4) * (1 - x^5) ) (1 + x^3 + x^4 + x^5 + x^7 + x^8 + x^9 + x^12)/((1 - x)*(1 - x^2)*(1 - x^3)^2*(1 - x^4)*(1 - x^5)) Equivalently: sage: H.change_denominator( signature={ \"coefficient\": 1, \"monomial\": (0,), \"factors\": { (1,): 1, (2,): 1, (3,): 2, (4,): 1, (5,): 1 } } ) (1 + x^3 + x^4 + x^5 + x^7 + x^8 + x^9 + x^12)/((1 - x)*(1 - x^2)*(1 - x^3)^2*(1 - x^4)*(1 - x^5)) \u2002 .denominator Returns the polynomial in the denominator as a brat . Example We build a brat for the following rational function and extract the denominator: [ f(x,y) = \\dfrac{1 + xy^2}{1 - x^2y^4}. ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.denominator() 1 - x^2*y^4 \u2002 .denominator_signature Returns the dictionary signature for the denominator. The format of the dictionary is as follows. The keys are \"coefficient\": a positive integer. \"monomial\": a degree tuple. \"factors\": dictionary with keys given by tuples and values in the positive integers. Example If the variables are ordered as $(x,y,z)$ and the denominator is [ 3xy^3(1 - x^2y)(1 - y^4)^3(1 - xyz)(1 - x^2)^5 ] Then the dictionary is sage: d_sig = { \"coefficient\": 3, \"monomial\": (1, 3, 0), \"factors\": { (2, 1, 0): 1, (0, 4, 0): 3, (1, 1, 1): 1, (2, 0, 0): 5, }, } We can extract this dictionary by creating a brat with numerator 1 . sage: x, y, z = polygens(ZZ, 'x,y,z') sage: F = br.brat(1/(3*x*y^3*(1 - x^2*y)*(1 - y^4)^3*(1 - x*y*z)*(1 - x^2)^5)) sage: F x^-1*y^-3/(3*(1 - x^2)^5*(1 - x*y*z)*(1 - x^2*y)*(1 - y^4)^3) sage: F.denominator_signature() {'coefficient': 3, 'monomial': (1, 3, 0), 'factors': {(2, 0, 0): 5, (0, 4, 0): 3, (1, 1, 1): 1, (2, 1, 0): 1}} \u2002 .factor Returns a new brat object with the numerator polynomial factored. \u2002 .increasing_order This is set to True by default\u2014unless it was set to False upon construction. This can be toggled to either True or False . It will affect the print out and the .latex method. This method is not callable like the rest of the functions on this page. This means it is called without parentheses Example We construct the following polynomial and then switch the display order: [ h = t^3 - 6t^2 + 11t - 6. ] sage: t = polygens(QQ, 't')[0] sage: h = br.brat(t^3 - 6*t^2 + 11*t - 6) sage: h -(6 - 11*t + 6*t^2 - t^3) sage: h.increasing_order = False sage: h t^3 - 6*t^2 + 11*t - 6 \u2002 .invert_variables Returns the corresponding brat after inverting all of the variables. Keyword argument: ratio : returns the ratio of the original brat divided by the brat with inverted variables. Default: False . Example We verify that, after inverting the variables of [ E = \\dfrac{1 + 26T + 66T^2 + 26T^3 + T^4}{(1 - T)^5}, ] we obtain a $T$-multiple of it. sage: T = var('T') sage: E = br.brat( numerator=1 + 26*T + 66*T^2 + 26*T^3 + T^4, denominator_signature={\"coefficient\": 1, \"monomial\": (0,), \"factors\": {(1,): 5}} ) sage: E (1 + 26*T + 66*T^2 + 26*T^3 + T^4)/(1 - T)^5 sage: E.invert_variables() -(T + 26*T^2 + 66*T^3 + 26*T^4 + T^5)/(1 - T)^5 Now we can show it more clearly. sage: E.invert_variables()/E -T We can achieve this all in one go by using the keyword ratio . sage: E.invert_variables(ratio=True) -T \u2002 .latex Returns a string that formats the brat in $\\LaTeX$ in the '\\dfrac{...}{...}' format. Additional argument: factor : factor the numerator polynomial. Default: False . split : if true, returns a pair of strings formatted in $\\LaTeX$: the first is the numerator and the second is the denominator. Default: False . Example We obtain a $\\LaTeX$ formatting of the following rational function: [ \\dfrac{1 + 2t^2 + 4t^4 + 4t^6 + 2t^8 + t^{10}}{\\prod_{i=1}^5(1 - t^i)} . ] sage: t = var('t') sage: F = br.brat( numerator=1 + 2*t^2 + 4*t^4 + 4*t^6 + 2*t^8 + t^10, denominator=prod(1 - t^i for i in range(1, 6)) ) sage: F (1 + 2*t^2 + 4*t^4 + 4*t^6 + 2*t^8 + t^10)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)*(1 - t^5)) sage: F.latex() '\\\\dfrac{1 + 2t^2 + 4t^4 + 4t^6 + 2t^8 + t^{10}}{(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)(1 - t^5)}' By setting split to True , we get the numerator and denominator separated. sage: F.latex(split=True) ('1 + 2t^2 + 4t^4 + 4t^6 + 2t^8 + t^{10}', '(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)(1 - t^5)') \u2002 .numerator Returns the polynomial in the numerator of the rational function as a brat . Example We build a brat for the following rational function and extract the numerator: [ f(x,y) = \\dfrac{1 + xy^2}{1 - x^2y^4}. ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.numerator() 1 + x*y^2 \u2002 .rational_function Returns the reduced rational function. The underlying type of this object is not a brat . This method should be used if you do not want SageMath to convert to a brat after applying operations to the rational function. Example We build a brat for the following rational function and extract the rational function: [ f(x,y) = \\dfrac{1 + xy^2}{1 - x^2y^4}. ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.rational_function() 1/(-x*y^2 + 1) \u2002 .subs Given a dictionary of the desired substitutions, return the new brat obtained by performing the substitutions. This works in the same as the subs method for rational functions in SageMath. Example We apply some substitutions to the following rational function: [ C(T,Y) = \\dfrac{1 + 3Y + 2Y^2 + (2 + 3Y + Y^2)T}{(1 - T)^2} . ] sage: Y, T = polygens(QQ, 'Y,T') sage: C = br.brat( numerator=1 + 3*Y + 2*Y^2 + (2 + 3*Y + Y^2)*T, denominator=(1 - T)^2 ) sage: C (1 + 2*T + 3*Y + 3*Y*T + 2*Y^2 + Y^2*T)/(1 - T)^2 We set $Y$ to $0$ by applying a substitution. sage: C.subs({Y: 0}) (1 + 2*T)/(1 - T)^2 Note that some substitutions may yield rational functions that do not satisfy the main assumption , so the output will not be a brat . sage: C.subs({T: T - 1}) (Y^2*T + Y^2 + 3*Y*T + 2*T - 1)/(T^2 - 4*T + 4) \u2002 .variables Returns the polynomial variables used. Example We define the following rational function using symbolic variables [ f(x,y,z) = \\dfrac{1 + x^2y^2z^2}{(1 - xy)(1 - xz)(1 - yz)} ] sage: x, y, z = var('x y z') sage: f = (1 + x^2*y^2*z^2)/((1 - x*y)*(1 - x*z)*(1 - y*z)) sage: F = br.brat(f) sage: F (1 + x^2*y^2*z^2)/((1 - y*z)*(1 - x*z)*(1 - x*y)) We extract the variables and note that the type of variables have changed to be polynomial variables. sage: varbs = F.variables() sage: varbs (x, y, z) sage: type(varbs[0]) <class 'sage.rings.polynomial.multi_polynomial_libsingular.MPolynomial_libsingular'> \u2002 .write_latex Writes the brat object to a file formatted in $\\LaTeX$. The (default) output is a displayed equation (using \\[ and \\] ) of the brat . There are many parameters to change the format of the output. (Ordered) keyword arguments: filename : the string for the output filename. Default: None , which will output a timestamp name of the form %Y-%m-%d_%H-%M-%S.tex . just_numerator : write just the numerator. Default: False . just_denominator : write just the denominator. Default: False . align : format using the align* environment. This is especially useful for long polynomials. Default: False . factor : factor the numerator polynomial. Default: False . line_width : determines the line width in characters for each line of the align* environment. Only used when align is set to True . Default: 120 . function_name : turns the expression to an equation by displaying the function name. Default: None . save_message : turns on the save message at the end. Default: True . Examples We will write the following function to test.tex with all the other parameters set to their defaults: [ \\dfrac{1 + xy^2}{1 - x^2y^4} ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.write_latex('test.tex') File saved as test.tex. sage: with open('test.tex', 'r') as out_file: ....: print(out_file.read()) \\[ \\dfrac{1 + x y^2}{(1 - x^2y^4)} \\] Now we write the expanded polynomial to the file binomial.tex : [ (1 + X)^{20} ] Since it is just a polynomial, we will set just_numerator to True . We will also print this in an algin environment, leaving the line_width at 120 characters. sage: X = polygens(QQ, 'X')[0] sage: f = br.brat((1 + X)^20) sage: f 1 + 20*X + 190*X^2 + 1140*X^3 + 4845*X^4 + 15504*X^5 + 38760*X^6 + 77520*X^7 + 125970*X^8 + 167960*X^9 + 184756*X^10 + 167960*X^11 + 125970*X^12 + 77520*X^13 + 38760*X^14 + 15504*X^15 + 4845*X^16 + 1140*X^17 + 190*X^18 + 20*X^19 + X^20 sage: f.write_latex( filename=\"binomial.tex\", just_numerator=True, align=True, function_name=\"B_{20}(X)\" ) sage: with open(\"binomial.tex\", \"r\") as output: ....: print(output.read()) \\begin{align*} B_{20}(X) &= 1 + 20X + 190X^2 + 1140X^3 + 4845X^4 + 15504X^5 + 38760X^6 + 77520X^7 + 125970X^8 \\\\ &\\quad + 167960X^9 + 184756X^{10} + 167960X^{11} + 125970X^{12} + 77520X^{13} + 38760X^{14} + 15504X^{15} \\\\ &\\quad + 4845X^{16} + 1140X^{17} + 190X^{18} + 20X^{19} + X^{20} \\end{align*} The polynomial compiles to [\\begin{aligned} B_{20}(X) &= 1 + 20X + 190X^2 + 1140X^3 + 4845X^4 + 15504X^5 + 38760X^6 + 77520X^7 + 125970X^8 \\\\ &\\quad + 167960X^9 + 184756X^{10} + 167960X^{11} + 125970X^{12} + 77520X^{13} + 38760X^{14} + 15504X^{15} \\\\ &\\quad + 4845X^{16} + 1140X^{17} + 190X^{18} + 20X^{19} + X^{20} \\end{aligned}]","title":"Methods (brat)"},{"location":"brat-methods/#methods-brat","text":"We describe all of the methods associated with the class brat and provide examples.","title":"Methods (brat)"},{"location":"brat-methods/#change_denominator","text":"Given a polynomial\u2014or data equivalent to a polynomial (see arguments)\u2014returns a new brat , equal to the original, whose denominator is the given polynomial. (Ordered) keyword arguments: expression : the polynomial expression. Default: None . signature : the signature for the polynomial expression. See denominator signature method. Default: None .","title":".change_denominator"},{"location":"brat-methods/#example","text":"We construct the following rational function: [ H = \\dfrac{(1 + x^3)(1 + x^4)(1 + x^5)}{(1 - x)(1 - x^2)(1 - x^3)^2(1 - x^4)(1 - x^5)} ] from a simplified expression. Then we recover this particular expression using change_denominator . sage: x = polygens(QQ, 'x')[0] sage: h = (1 + x^3)*(1 + x^4)*(1 + x^5)/((1 - x)*(1 - x^2)*(1 - x^3)^2*(1 - x^4)*(1 - x^5)) sage: h (x^10 - 2*x^9 + 3*x^8 - 3*x^7 + 4*x^6 - 4*x^5 + 4*x^4 - 3*x^3 + 3*x^2 - 2*x + 1)/(x^16 - 3*x^15 + 4*x^14 - 6*x^ 13 + 9*x^12 - 10*x^11 + 12*x^10 - 13*x^9 + 12*x^8 - 13*x^7 + 12*x^6 - 10*x^5 + 9*x^4 - 6*x^3 + 4*x^2 - 3*x + 1) sage: H = br.brat(h) sage: H (1 - 2*x + 2*x^2 - x^3 + x^4 - x^5 + x^7 - x^8 + x^9 - 2*x^10 + 2*x^11 - x^12)/((1 - x)^3*(1 - x^3)^2*(1 - x^4) *(1 - x^5)) Note that the denominator is $(1 - x)^3(1 - x^3)^2(1 - x^4)(1 - x^5)$, which is not exactly what we want. sage: H.change_denominator( (1 - x) * (1 - x^2) * (1 - x^3)^2 * (1 - x^4) * (1 - x^5) ) (1 + x^3 + x^4 + x^5 + x^7 + x^8 + x^9 + x^12)/((1 - x)*(1 - x^2)*(1 - x^3)^2*(1 - x^4)*(1 - x^5)) Equivalently: sage: H.change_denominator( signature={ \"coefficient\": 1, \"monomial\": (0,), \"factors\": { (1,): 1, (2,): 1, (3,): 2, (4,): 1, (5,): 1 } } ) (1 + x^3 + x^4 + x^5 + x^7 + x^8 + x^9 + x^12)/((1 - x)*(1 - x^2)*(1 - x^3)^2*(1 - x^4)*(1 - x^5))","title":"Example"},{"location":"brat-methods/#denominator","text":"Returns the polynomial in the denominator as a brat .","title":".denominator"},{"location":"brat-methods/#example_1","text":"We build a brat for the following rational function and extract the denominator: [ f(x,y) = \\dfrac{1 + xy^2}{1 - x^2y^4}. ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.denominator() 1 - x^2*y^4","title":"Example"},{"location":"brat-methods/#denominator_signature","text":"Returns the dictionary signature for the denominator. The format of the dictionary is as follows. The keys are \"coefficient\": a positive integer. \"monomial\": a degree tuple. \"factors\": dictionary with keys given by tuples and values in the positive integers.","title":".denominator_signature"},{"location":"brat-methods/#example_2","text":"If the variables are ordered as $(x,y,z)$ and the denominator is [ 3xy^3(1 - x^2y)(1 - y^4)^3(1 - xyz)(1 - x^2)^5 ] Then the dictionary is sage: d_sig = { \"coefficient\": 3, \"monomial\": (1, 3, 0), \"factors\": { (2, 1, 0): 1, (0, 4, 0): 3, (1, 1, 1): 1, (2, 0, 0): 5, }, } We can extract this dictionary by creating a brat with numerator 1 . sage: x, y, z = polygens(ZZ, 'x,y,z') sage: F = br.brat(1/(3*x*y^3*(1 - x^2*y)*(1 - y^4)^3*(1 - x*y*z)*(1 - x^2)^5)) sage: F x^-1*y^-3/(3*(1 - x^2)^5*(1 - x*y*z)*(1 - x^2*y)*(1 - y^4)^3) sage: F.denominator_signature() {'coefficient': 3, 'monomial': (1, 3, 0), 'factors': {(2, 0, 0): 5, (0, 4, 0): 3, (1, 1, 1): 1, (2, 1, 0): 1}}","title":"Example"},{"location":"brat-methods/#factor","text":"Returns a new brat object with the numerator polynomial factored.","title":".factor"},{"location":"brat-methods/#increasing_order","text":"This is set to True by default\u2014unless it was set to False upon construction. This can be toggled to either True or False . It will affect the print out and the .latex method. This method is not callable like the rest of the functions on this page. This means it is called without parentheses","title":".increasing_order"},{"location":"brat-methods/#example_3","text":"We construct the following polynomial and then switch the display order: [ h = t^3 - 6t^2 + 11t - 6. ] sage: t = polygens(QQ, 't')[0] sage: h = br.brat(t^3 - 6*t^2 + 11*t - 6) sage: h -(6 - 11*t + 6*t^2 - t^3) sage: h.increasing_order = False sage: h t^3 - 6*t^2 + 11*t - 6","title":"Example"},{"location":"brat-methods/#invert_variables","text":"Returns the corresponding brat after inverting all of the variables. Keyword argument: ratio : returns the ratio of the original brat divided by the brat with inverted variables. Default: False .","title":".invert_variables"},{"location":"brat-methods/#example_4","text":"We verify that, after inverting the variables of [ E = \\dfrac{1 + 26T + 66T^2 + 26T^3 + T^4}{(1 - T)^5}, ] we obtain a $T$-multiple of it. sage: T = var('T') sage: E = br.brat( numerator=1 + 26*T + 66*T^2 + 26*T^3 + T^4, denominator_signature={\"coefficient\": 1, \"monomial\": (0,), \"factors\": {(1,): 5}} ) sage: E (1 + 26*T + 66*T^2 + 26*T^3 + T^4)/(1 - T)^5 sage: E.invert_variables() -(T + 26*T^2 + 66*T^3 + 26*T^4 + T^5)/(1 - T)^5 Now we can show it more clearly. sage: E.invert_variables()/E -T We can achieve this all in one go by using the keyword ratio . sage: E.invert_variables(ratio=True) -T","title":"Example"},{"location":"brat-methods/#latex","text":"Returns a string that formats the brat in $\\LaTeX$ in the '\\dfrac{...}{...}' format. Additional argument: factor : factor the numerator polynomial. Default: False . split : if true, returns a pair of strings formatted in $\\LaTeX$: the first is the numerator and the second is the denominator. Default: False .","title":".latex"},{"location":"brat-methods/#example_5","text":"We obtain a $\\LaTeX$ formatting of the following rational function: [ \\dfrac{1 + 2t^2 + 4t^4 + 4t^6 + 2t^8 + t^{10}}{\\prod_{i=1}^5(1 - t^i)} . ] sage: t = var('t') sage: F = br.brat( numerator=1 + 2*t^2 + 4*t^4 + 4*t^6 + 2*t^8 + t^10, denominator=prod(1 - t^i for i in range(1, 6)) ) sage: F (1 + 2*t^2 + 4*t^4 + 4*t^6 + 2*t^8 + t^10)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)*(1 - t^5)) sage: F.latex() '\\\\dfrac{1 + 2t^2 + 4t^4 + 4t^6 + 2t^8 + t^{10}}{(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)(1 - t^5)}' By setting split to True , we get the numerator and denominator separated. sage: F.latex(split=True) ('1 + 2t^2 + 4t^4 + 4t^6 + 2t^8 + t^{10}', '(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)(1 - t^5)')","title":"Example"},{"location":"brat-methods/#numerator","text":"Returns the polynomial in the numerator of the rational function as a brat .","title":".numerator"},{"location":"brat-methods/#example_6","text":"We build a brat for the following rational function and extract the numerator: [ f(x,y) = \\dfrac{1 + xy^2}{1 - x^2y^4}. ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.numerator() 1 + x*y^2","title":"Example"},{"location":"brat-methods/#rational_function","text":"Returns the reduced rational function. The underlying type of this object is not a brat . This method should be used if you do not want SageMath to convert to a brat after applying operations to the rational function.","title":".rational_function"},{"location":"brat-methods/#example_7","text":"We build a brat for the following rational function and extract the rational function: [ f(x,y) = \\dfrac{1 + xy^2}{1 - x^2y^4}. ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.rational_function() 1/(-x*y^2 + 1)","title":"Example"},{"location":"brat-methods/#subs","text":"Given a dictionary of the desired substitutions, return the new brat obtained by performing the substitutions. This works in the same as the subs method for rational functions in SageMath.","title":".subs"},{"location":"brat-methods/#example_8","text":"We apply some substitutions to the following rational function: [ C(T,Y) = \\dfrac{1 + 3Y + 2Y^2 + (2 + 3Y + Y^2)T}{(1 - T)^2} . ] sage: Y, T = polygens(QQ, 'Y,T') sage: C = br.brat( numerator=1 + 3*Y + 2*Y^2 + (2 + 3*Y + Y^2)*T, denominator=(1 - T)^2 ) sage: C (1 + 2*T + 3*Y + 3*Y*T + 2*Y^2 + Y^2*T)/(1 - T)^2 We set $Y$ to $0$ by applying a substitution. sage: C.subs({Y: 0}) (1 + 2*T)/(1 - T)^2 Note that some substitutions may yield rational functions that do not satisfy the main assumption , so the output will not be a brat . sage: C.subs({T: T - 1}) (Y^2*T + Y^2 + 3*Y*T + 2*T - 1)/(T^2 - 4*T + 4)","title":"Example"},{"location":"brat-methods/#variables","text":"Returns the polynomial variables used.","title":".variables"},{"location":"brat-methods/#example_9","text":"We define the following rational function using symbolic variables [ f(x,y,z) = \\dfrac{1 + x^2y^2z^2}{(1 - xy)(1 - xz)(1 - yz)} ] sage: x, y, z = var('x y z') sage: f = (1 + x^2*y^2*z^2)/((1 - x*y)*(1 - x*z)*(1 - y*z)) sage: F = br.brat(f) sage: F (1 + x^2*y^2*z^2)/((1 - y*z)*(1 - x*z)*(1 - x*y)) We extract the variables and note that the type of variables have changed to be polynomial variables. sage: varbs = F.variables() sage: varbs (x, y, z) sage: type(varbs[0]) <class 'sage.rings.polynomial.multi_polynomial_libsingular.MPolynomial_libsingular'>","title":"Example"},{"location":"brat-methods/#write_latex","text":"Writes the brat object to a file formatted in $\\LaTeX$. The (default) output is a displayed equation (using \\[ and \\] ) of the brat . There are many parameters to change the format of the output. (Ordered) keyword arguments: filename : the string for the output filename. Default: None , which will output a timestamp name of the form %Y-%m-%d_%H-%M-%S.tex . just_numerator : write just the numerator. Default: False . just_denominator : write just the denominator. Default: False . align : format using the align* environment. This is especially useful for long polynomials. Default: False . factor : factor the numerator polynomial. Default: False . line_width : determines the line width in characters for each line of the align* environment. Only used when align is set to True . Default: 120 . function_name : turns the expression to an equation by displaying the function name. Default: None . save_message : turns on the save message at the end. Default: True .","title":".write_latex"},{"location":"brat-methods/#examples","text":"We will write the following function to test.tex with all the other parameters set to their defaults: [ \\dfrac{1 + xy^2}{1 - x^2y^4} ] sage: x, y = polygens(QQ, 'x,y') sage: f = br.brat( numerator=1 + x*y^2, denominator=1 - x^2*y^4 ) sage: f (1 + x*y^2)/(1 - x^2*y^4) sage: f.write_latex('test.tex') File saved as test.tex. sage: with open('test.tex', 'r') as out_file: ....: print(out_file.read()) \\[ \\dfrac{1 + x y^2}{(1 - x^2y^4)} \\] Now we write the expanded polynomial to the file binomial.tex : [ (1 + X)^{20} ] Since it is just a polynomial, we will set just_numerator to True . We will also print this in an algin environment, leaving the line_width at 120 characters. sage: X = polygens(QQ, 'X')[0] sage: f = br.brat((1 + X)^20) sage: f 1 + 20*X + 190*X^2 + 1140*X^3 + 4845*X^4 + 15504*X^5 + 38760*X^6 + 77520*X^7 + 125970*X^8 + 167960*X^9 + 184756*X^10 + 167960*X^11 + 125970*X^12 + 77520*X^13 + 38760*X^14 + 15504*X^15 + 4845*X^16 + 1140*X^17 + 190*X^18 + 20*X^19 + X^20 sage: f.write_latex( filename=\"binomial.tex\", just_numerator=True, align=True, function_name=\"B_{20}(X)\" ) sage: with open(\"binomial.tex\", \"r\") as output: ....: print(output.read()) \\begin{align*} B_{20}(X) &= 1 + 20X + 190X^2 + 1140X^3 + 4845X^4 + 15504X^5 + 38760X^6 + 77520X^7 + 125970X^8 \\\\ &\\quad + 167960X^9 + 184756X^{10} + 167960X^{11} + 125970X^{12} + 77520X^{13} + 38760X^{14} + 15504X^{15} \\\\ &\\quad + 4845X^{16} + 1140X^{17} + 190X^{18} + 20X^{19} + X^{20} \\end{align*} The polynomial compiles to [\\begin{aligned} B_{20}(X) &= 1 + 20X + 190X^2 + 1140X^3 + 4845X^4 + 15504X^5 + 38760X^6 + 77520X^7 + 125970X^8 \\\\ &\\quad + 167960X^9 + 184756X^{10} + 167960X^{11} + 125970X^{12} + 77520X^{13} + 38760X^{14} + 15504X^{15} \\\\ &\\quad + 4845X^{16} + 1140X^{17} + 190X^{18} + 20X^{19} + X^{20} \\end{aligned}]","title":"Examples"},{"location":"brat/","text":"brat \u2003 The class we use to format rational functions is brat , and the kinds of rational functions accepted satisfy the main assumption : they can be expressed as [ \\dfrac{F(\\bm{X})}{c\\bm{X}^{\\beta} \\prod_{i=1}^m(1 - \\bm{X}^{\\alpha_i})}, ] where the following hold: $\\bm{X}=(X_1, \\dots, X_n)$ are variables, $F(\\bm{X})\\in \\mathbb{Z}[\\bm{X}]$, $c\\in \\N$, $\\beta\\in\\N_0^n$, $m\\in\\N_0$, $\\alpha_i\\in\\mathbb{Z}^n$, where $\\bm{X}^{\\alpha_i} = X_1^{\\alpha_{i,1}}\\cdots X_n^{\\alpha_{i,n}}$. This includes all elements of $\\mathbb{Q}[\\bm{X}^{\\pm 1}]$ for example. The keyword arguments for brat are rational_expression : the rational function (default: None ), numerator : the numerator polynomial of the rational function (default: None ), denominator : the denominator polynomial of the rational function (default: None ), denominator_signature : the dictionary of data for the denominator (default: None ), fix_denominator : whether to keep the given denominator fixed---does not apply to coefficients (default: True ), increasing_order : whether to display polynomials in increasing degree (default: True ), hide_monomial : whether to absorb the monomial in the denominator into the numerator (default: True ). Additional notes . The denominator_signature must be a dictionary whose keys are \"coefficient\" : an integer, \"monomial\" : a tuple of non-negative integers with length matching the number of variables, \"factors\" : a dictionary whose keys are tuples of integers with values of non-negative integers. Examples of acceptable denominator_signature are given in Denominator Signature and in the denominator_signature method. \u2002 Algebraic operations and relations One can use the usual algebraic operations with brat : add, subtract, multiply, divide (i.e. 'true' divide), powers. The Boolean relations == and != can also be used. When adding a brat with something else, we attempt to make another brat object. Warning: we cannot do anything about algebraic operations where the first object is not a brat object. For example, if F is a brat but G is a polynomial in SageMath, then G + F may raise errors, while F + G will attempt to add the two objects\u2014other errors may arise. Examples We build many examples using the brat constructor. \u2002 Introduction We express the rational function [ f=\\dfrac{1 + xy + x^2y^2}{(1 - x)(1 - y)}. ] First we write this in the usual way, using symbolic variables. sage: x, y = var('x y') sage: f = (1 + x*y + x^2*y^2)/((1 - x)*(1 - y)) sage: f (x^2*y^2 + x*y + 1)/((x - 1)*(y - 1)) Now we build a brat from $f$. sage: F = br.brat(f) sage: F (1 + x*y + x^2*y^2)/((1 - y)*(1 - x)) \u2002 Prescribed Denominator I Now we write the rational function [ g = \\dfrac{1 + 4t + 6t^2 + 4t^3 + t^4}{(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)} . ] sage: t = polygens(QQ, 't')[0] sage: g = (1 + 4*t + 6*t^2 + 4*t^3 + t^4)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)) sage: g (t^2 + 2*t + 1)/(t^8 - 3*t^7 + 4*t^6 - 5*t^5 + 6*t^4 - 5*t^3 + 4*t^2 - 3*t + 1) Now we build a brat. sage: G = br.brat(g) sage: G (1 + 2*t - 2*t^3 - t^4)/((1 - t)^3*(1 - t^3)*(1 - t^4)) We could instead insist that the denominator $(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)$ stay fixed. sage: G = br.brat( numerator=1 + 4*t + 6*t^2 + 4*t^3 + t^4, denominator=(1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4) ) sage: G (1 + 4*t + 6*t^2 + 4*t^3 + t^4)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)) By default, fix_denominator is set to True . Setting this to False yields the following. sage: br.brat( numerator=1 + 4*t + 6*t^2 + 4*t^3 + t^4, denominator=(1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4), fix_denominator=False ) (1 + 2*t - 2*t^3 - t^4)/((1 - t)^3*(1 - t^3)*(1 - t^4)) \u2002 Prescribed denominator II We construct the following rational function a few different ways: [ P = \\dfrac{1 + 6T + 11T^2 + 6T^3}{(1 - T^4)}. ] sage: T = polygens(QQ, 'T')[0] sage: P = br.brat((1 + 6*T + 11*T^2 + 6*T^3)/(1 - T^4)) sage: P (1 + 5*T + 5*T^2 - 5*T^3 - 6*T^4)/((1 - T)*(1 - T^4)) By doing the above construction, we added a factor of $1-T$. This is because SageMath automatically removes common factors in the numerator and denominator of the quotient (1 + 6*T + 11*T^2 + 6*T^3)/(1 - T^4) . The resulting denominator is $(T - 1)(T^2 + 1)$. sage: P = br.brat( numerator=1 + 6*T + 11*T^2 + 6*T^3, denominator=(1 - T)^4 ) sage: P (1 + 6*T + 11*T^2 + 6*T^3)/(1 - T)^4 By separating the denominator (and fixing it by default), we get the desired expression. We can also switch the order of how polynomials are displayed. Instead of displaying the terms in a weakly increasing-degree sequence, we can make it weakly decreasing. sage: P = br.brat( numerator=1 + 6*T + 11*T^2 + 6*T^3, denominator=(1 - T)^4, increasing_order=False ) sage: P (6*T^3 + 11*T^2 + 6*T + 1)/(1 - T)^4 \u2002 Denominator Signature We construct the following rational function using a denominator signature: [ h = \\dfrac{1}{8(1 - X_1)(1 - X_2)^3(1 - X_1X_2X_3)^4(1 - X_1X_2X_3^2)}. ] sage: R = PolynomialRing(QQ, 'X1,X2,X3') sage: d_sig = { \"coefficient\": 8, \"monomial\": (0, 0, 0), \"factors\": { (1, 0, 0): 1, (0, 1, 0): 3, (1, 1, 1): 4, (1, 1, 2): 1 } } sage: H = br.brat(numerator=R(1), denominator_signature=d_sig) sage: H 1/(8*(1 - X1)*(1 - X2)^3*(1 - X1*X2*X3)^4*(1 - X1*X2*X3^2)) \u2002 Negative Exponents I We express the Igusa zeta function associated with the braid arrangement: [ Z_2 = \\dfrac{1 - 3q^{-1} + 2q^{-2} + 2q^{-1}t - 3q^{-2}t + q^{-3}t}{(1 - q^{-1}t)(1 - q^{-2}t^3)} . ] See Maglione\u2013Voll for details. sage: q, t = var('q t') sage: Z2 = (1 - 3*q^-1 + 2*q^-2 + 2*q^-1*t - 3*q^-2*t + q^-3*t)/((1 - q^-1*t)*(1 - q^-2*t^3)) sage: Z2 (2*t/q - 3/q - 3*t/q^2 + 2/q^2 + t/q^3 + 1)/((t^3/q^2 - 1)*(t/q - 1)) sage: br.brat(Z2) (q^-3*t + 2*q^-2 - 3*q^-2*t - 3*q^-1 + 2*q^-1*t + 1)/((1 - q^-1*t)*(1 - q^-2*t^3)) To get the output a little closer to how we have it formatted above, we can set increasing_order to False . sage: br.brat(Z2, increasing_order=False) (1 + 2*q^-1*t - 3*q^-1 - 3*q^-2*t + 2*q^-2 + q^-3*t)/((1 - q^-1*t)*(1 - q^-2*t^3)) \u2002 Negative Exponents II We express the ask zeta function associated with the complete graph on four vertices: [ W_{minus} = \\dfrac{q^3 - t}{q^3(1 - t)(1 - qt)}. ] See Rossmann\u2013Voll for details. sage: q, t = var('q t') sage: W_minus = (q^3 - t)/(q^3*(1 - t)*(1 - q*t)) sage: W_minus (q^3 - t)/((q*t - 1)*q^3*(t - 1)) sage: br.brat(W_minus) -(q^-3*t - 1)/((1 - t)*(1 - q*t)) If we set increasing_order to False , then the 1 will be the leading term, and since it has a positive coefficient, we will avoid the negative scalar in front. sage: br.brat(W_minus, increasing_order=False) (1 - q^-3*t)/((1 - t)*(1 - q*t)) Moreover, if we want to make the factor $q^3$ in the denominator explicit, we can set hide_monomial to False . sage: br.brat(W_minus, increasing_order=False, hide_monomial=False) (q^3 - t)/(q^3*(1 - t)*(1 - q*t)) \u2002 Pretty Print (pretty_print) When applying the SageMath function pretty_print (or when it is on) in a Jupyter notebook, the brat will be displayed with $\\LaTeX$. There are many ways to set up a Jupyter notebook. One way is to run the following. $ sage -n jupyter In our Jupyter notebook, we observe the following.","title":"brat"},{"location":"brat/#brat","text":"The class we use to format rational functions is brat , and the kinds of rational functions accepted satisfy the main assumption : they can be expressed as [ \\dfrac{F(\\bm{X})}{c\\bm{X}^{\\beta} \\prod_{i=1}^m(1 - \\bm{X}^{\\alpha_i})}, ] where the following hold: $\\bm{X}=(X_1, \\dots, X_n)$ are variables, $F(\\bm{X})\\in \\mathbb{Z}[\\bm{X}]$, $c\\in \\N$, $\\beta\\in\\N_0^n$, $m\\in\\N_0$, $\\alpha_i\\in\\mathbb{Z}^n$, where $\\bm{X}^{\\alpha_i} = X_1^{\\alpha_{i,1}}\\cdots X_n^{\\alpha_{i,n}}$. This includes all elements of $\\mathbb{Q}[\\bm{X}^{\\pm 1}]$ for example. The keyword arguments for brat are rational_expression : the rational function (default: None ), numerator : the numerator polynomial of the rational function (default: None ), denominator : the denominator polynomial of the rational function (default: None ), denominator_signature : the dictionary of data for the denominator (default: None ), fix_denominator : whether to keep the given denominator fixed---does not apply to coefficients (default: True ), increasing_order : whether to display polynomials in increasing degree (default: True ), hide_monomial : whether to absorb the monomial in the denominator into the numerator (default: True ). Additional notes . The denominator_signature must be a dictionary whose keys are \"coefficient\" : an integer, \"monomial\" : a tuple of non-negative integers with length matching the number of variables, \"factors\" : a dictionary whose keys are tuples of integers with values of non-negative integers. Examples of acceptable denominator_signature are given in Denominator Signature and in the denominator_signature method.","title":"brat"},{"location":"brat/#algebraic-operations-and-relations","text":"One can use the usual algebraic operations with brat : add, subtract, multiply, divide (i.e. 'true' divide), powers. The Boolean relations == and != can also be used. When adding a brat with something else, we attempt to make another brat object. Warning: we cannot do anything about algebraic operations where the first object is not a brat object. For example, if F is a brat but G is a polynomial in SageMath, then G + F may raise errors, while F + G will attempt to add the two objects\u2014other errors may arise.","title":"Algebraic operations and relations"},{"location":"brat/#examples","text":"We build many examples using the brat constructor.","title":"Examples"},{"location":"brat/#introduction","text":"We express the rational function [ f=\\dfrac{1 + xy + x^2y^2}{(1 - x)(1 - y)}. ] First we write this in the usual way, using symbolic variables. sage: x, y = var('x y') sage: f = (1 + x*y + x^2*y^2)/((1 - x)*(1 - y)) sage: f (x^2*y^2 + x*y + 1)/((x - 1)*(y - 1)) Now we build a brat from $f$. sage: F = br.brat(f) sage: F (1 + x*y + x^2*y^2)/((1 - y)*(1 - x))","title":"Introduction"},{"location":"brat/#prescribed-denominator-i","text":"Now we write the rational function [ g = \\dfrac{1 + 4t + 6t^2 + 4t^3 + t^4}{(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)} . ] sage: t = polygens(QQ, 't')[0] sage: g = (1 + 4*t + 6*t^2 + 4*t^3 + t^4)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)) sage: g (t^2 + 2*t + 1)/(t^8 - 3*t^7 + 4*t^6 - 5*t^5 + 6*t^4 - 5*t^3 + 4*t^2 - 3*t + 1) Now we build a brat. sage: G = br.brat(g) sage: G (1 + 2*t - 2*t^3 - t^4)/((1 - t)^3*(1 - t^3)*(1 - t^4)) We could instead insist that the denominator $(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)$ stay fixed. sage: G = br.brat( numerator=1 + 4*t + 6*t^2 + 4*t^3 + t^4, denominator=(1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4) ) sage: G (1 + 4*t + 6*t^2 + 4*t^3 + t^4)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)) By default, fix_denominator is set to True . Setting this to False yields the following. sage: br.brat( numerator=1 + 4*t + 6*t^2 + 4*t^3 + t^4, denominator=(1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4), fix_denominator=False ) (1 + 2*t - 2*t^3 - t^4)/((1 - t)^3*(1 - t^3)*(1 - t^4))","title":"Prescribed Denominator I"},{"location":"brat/#prescribed-denominator-ii","text":"We construct the following rational function a few different ways: [ P = \\dfrac{1 + 6T + 11T^2 + 6T^3}{(1 - T^4)}. ] sage: T = polygens(QQ, 'T')[0] sage: P = br.brat((1 + 6*T + 11*T^2 + 6*T^3)/(1 - T^4)) sage: P (1 + 5*T + 5*T^2 - 5*T^3 - 6*T^4)/((1 - T)*(1 - T^4)) By doing the above construction, we added a factor of $1-T$. This is because SageMath automatically removes common factors in the numerator and denominator of the quotient (1 + 6*T + 11*T^2 + 6*T^3)/(1 - T^4) . The resulting denominator is $(T - 1)(T^2 + 1)$. sage: P = br.brat( numerator=1 + 6*T + 11*T^2 + 6*T^3, denominator=(1 - T)^4 ) sage: P (1 + 6*T + 11*T^2 + 6*T^3)/(1 - T)^4 By separating the denominator (and fixing it by default), we get the desired expression. We can also switch the order of how polynomials are displayed. Instead of displaying the terms in a weakly increasing-degree sequence, we can make it weakly decreasing. sage: P = br.brat( numerator=1 + 6*T + 11*T^2 + 6*T^3, denominator=(1 - T)^4, increasing_order=False ) sage: P (6*T^3 + 11*T^2 + 6*T + 1)/(1 - T)^4","title":"Prescribed denominator II"},{"location":"brat/#denominator-signature","text":"We construct the following rational function using a denominator signature: [ h = \\dfrac{1}{8(1 - X_1)(1 - X_2)^3(1 - X_1X_2X_3)^4(1 - X_1X_2X_3^2)}. ] sage: R = PolynomialRing(QQ, 'X1,X2,X3') sage: d_sig = { \"coefficient\": 8, \"monomial\": (0, 0, 0), \"factors\": { (1, 0, 0): 1, (0, 1, 0): 3, (1, 1, 1): 4, (1, 1, 2): 1 } } sage: H = br.brat(numerator=R(1), denominator_signature=d_sig) sage: H 1/(8*(1 - X1)*(1 - X2)^3*(1 - X1*X2*X3)^4*(1 - X1*X2*X3^2))","title":"Denominator Signature"},{"location":"brat/#negative-exponents-i","text":"We express the Igusa zeta function associated with the braid arrangement: [ Z_2 = \\dfrac{1 - 3q^{-1} + 2q^{-2} + 2q^{-1}t - 3q^{-2}t + q^{-3}t}{(1 - q^{-1}t)(1 - q^{-2}t^3)} . ] See Maglione\u2013Voll for details. sage: q, t = var('q t') sage: Z2 = (1 - 3*q^-1 + 2*q^-2 + 2*q^-1*t - 3*q^-2*t + q^-3*t)/((1 - q^-1*t)*(1 - q^-2*t^3)) sage: Z2 (2*t/q - 3/q - 3*t/q^2 + 2/q^2 + t/q^3 + 1)/((t^3/q^2 - 1)*(t/q - 1)) sage: br.brat(Z2) (q^-3*t + 2*q^-2 - 3*q^-2*t - 3*q^-1 + 2*q^-1*t + 1)/((1 - q^-1*t)*(1 - q^-2*t^3)) To get the output a little closer to how we have it formatted above, we can set increasing_order to False . sage: br.brat(Z2, increasing_order=False) (1 + 2*q^-1*t - 3*q^-1 - 3*q^-2*t + 2*q^-2 + q^-3*t)/((1 - q^-1*t)*(1 - q^-2*t^3))","title":"Negative Exponents I"},{"location":"brat/#negative-exponents-ii","text":"We express the ask zeta function associated with the complete graph on four vertices: [ W_{minus} = \\dfrac{q^3 - t}{q^3(1 - t)(1 - qt)}. ] See Rossmann\u2013Voll for details. sage: q, t = var('q t') sage: W_minus = (q^3 - t)/(q^3*(1 - t)*(1 - q*t)) sage: W_minus (q^3 - t)/((q*t - 1)*q^3*(t - 1)) sage: br.brat(W_minus) -(q^-3*t - 1)/((1 - t)*(1 - q*t)) If we set increasing_order to False , then the 1 will be the leading term, and since it has a positive coefficient, we will avoid the negative scalar in front. sage: br.brat(W_minus, increasing_order=False) (1 - q^-3*t)/((1 - t)*(1 - q*t)) Moreover, if we want to make the factor $q^3$ in the denominator explicit, we can set hide_monomial to False . sage: br.brat(W_minus, increasing_order=False, hide_monomial=False) (q^3 - t)/(q^3*(1 - t)*(1 - q*t))","title":"Negative Exponents II"},{"location":"brat/#pretty-print-pretty_print","text":"When applying the SageMath function pretty_print (or when it is on) in a Jupyter notebook, the brat will be displayed with $\\LaTeX$. There are many ways to set up a Jupyter notebook. One way is to run the following. $ sage -n jupyter In our Jupyter notebook, we observe the following.","title":"Pretty Print (pretty_print)"}]}