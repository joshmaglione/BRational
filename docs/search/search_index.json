{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BRational Author: Joshua Maglione . Documentation for the BRational package for SageMath . Purpose The goal of BRational is to format certain rational functions in SageMath in a particular format. These rational functions contain the class of generating series, which is our primary use case. The main purpose is to enable users to manipulate such expressions and to rewrite expressions for ease of comprehension. Setup The simplest way to install BRational is to run the following $ sage --pip install brational Alternatively, one can download the latest release and unzip it into a directory that SageMath can find for importing. To update an older version of BRational to the latest version, run the following $ sage --pip install brational --upgrade BRational has no external dependencies and is compatible with SageMath 9.6 and later. It may work just fine with earlier versions of SageMath, but these have not been tested. Importing Import BRational during your SageMath run with the following import brational as br Throughout this documentation, we use br for the reference name of brational .","title":"Home"},{"location":"#brational","text":"Author: Joshua Maglione . Documentation for the BRational package for SageMath .","title":"BRational"},{"location":"#purpose","text":"The goal of BRational is to format certain rational functions in SageMath in a particular format. These rational functions contain the class of generating series, which is our primary use case. The main purpose is to enable users to manipulate such expressions and to rewrite expressions for ease of comprehension.","title":"Purpose"},{"location":"#setup","text":"The simplest way to install BRational is to run the following $ sage --pip install brational Alternatively, one can download the latest release and unzip it into a directory that SageMath can find for importing. To update an older version of BRational to the latest version, run the following $ sage --pip install brational --upgrade BRational has no external dependencies and is compatible with SageMath 9.6 and later. It may work just fine with earlier versions of SageMath, but these have not been tested.","title":"Setup"},{"location":"#importing","text":"Import BRational during your SageMath run with the following import brational as br Throughout this documentation, we use br for the reference name of brational .","title":"Importing"},{"location":"brat/","text":"brat The class we use to format rational functions is brat , and the kinds of rational functions accepted have the form [ \\dfrac{F(\\bm{X})}{C\\cdot \\prod_{i=1}^m(1 - \\bm{X}^{\\alpha_i})}, ] where the following hold: $\\bm{X}=(X_1, \\dots, X_n)$ are variables, $F(\\bm{X})\\in \\mathbb{Q}[\\bm{X}]$, $C\\in \\mathbb{Q}$, $m\\in\\N_0$, $\\alpha_i\\in\\N_0^n$, where $\\bm{X}^{\\alpha_i} = X_1^{\\alpha_{i,1}}\\cdots X_n^{\\alpha_{i,n}}$. The (ordered) keyword arguments for brat are rational_expression : the rational function, numerator : the numerator polynomial of the rational function, denominator : the denominator polynomial of the rational function. Upon construction of a brat , the rational function is simplified. One can use the usual algebraic operations with brat . When adding a brat with something else, we attempt to make another brat object. To \"opt out\", use the method rational_function . Examples We expression the rational function [ f(x,y)=\\dfrac{1 + xy + x^2y^2}{(1 - x)(1 - y)}. ] First we write this in the usual way, using symbolic variables. sage: x, y = var('x y') sage: f = (1 + x*y + x^2*y^2)/((1 - x)*(1 - y)) sage: f (x^2*y^2 + x*y + 1)/((x - 1)*(y - 1)) Now we build a brat from $f(x,y)$. sage: F = br.brat(f) sage: F (1 + x*y + x^2*y^2)/((1 - y)*(1 - x)) Now we write the rational function [ g(t) = \\dfrac{1 + 4t + 6t^2 + 4t^3 + t^4}{(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)} . ] sage: t = polygens(QQ, 't')[0] sage: g = (1 + 4*t + 6*t^2 + 4*t^3 + t^4)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)) sage: g (t^2 + 2*t + 1)/(t^8 - 3*t^7 + 4*t^6 - 5*t^5 + 6*t^4 - 5*t^3 + 4*t^2 - 3*t + 1) Now we build a brat. sage: G = br.brat(g) sage: G (1 + 2*t - 2*t^3 - t^4)/((1 - t)^3*(1 - t^3)*(1 - t^4)) .denominator Returns the polynomial in the denominator of the rational function. This is not necessarily reduced. .denominator_signature Returns the dictionary signature for the denominator. The format of the dictionary is as follows. The keys are \"monomial\": rational number, \"factors\": dictionary with keys given by vectors and values in the positive integers. Example If the variables are ordered as $(x,y,z)$ and the denominator is [ 3\\cdot (1 - x^2y)(1 - y^4)^3(1 - xyz)(1 - x^2)^5 ] Then the dictionary is { \"monomial\": 3 \"factors\": { (2, 1, 0): 1, (0, 4, 0): 3, (1, 1, 1): 1, (2, 0, 0): 5 } } In nearly every situation, the monomial is absorbed to the numerator as a rational multiple. Now we do this in SageMath. sage: x, y, z = polygens(ZZ, 'x,y,z') sage: F = br.brat(1/(3*(1 - x^2*y)*(1 - y^4)^3*(1 - x*y*z)*(1 - x^2)^5)) sage: F (1/3)/((1 - x^2)^5*(1 - x*y*z)*(1 - x^2*y)*(1 - y^4)^3) sage: F.denominator_signature() {'monomial': 1, 'factors': {(2, 0, 0): 5, (0, 4, 0): 3, (1, 1, 1): 1, (2, 1, 0): 1}} .invert_variables Returns the corresponding brat after inverting all of the variables and then rewriting the rational function so that all exponents are non-negative. .latex Returns a string that formats the brat in $\\LaTeX$ in the '\\dfrac{...}{...}' format. Additional argument: split : If true, returns a pair of strings formatted in $\\LaTeX$: the first is the numerator and the second is the denominator. Default: False . Example We obtain a $\\LaTeX$ formatting of the following rational function: [ \\dfrac{1 + 2t + 4t^2 + 4t^3 + 2t^4 + t^5}{\\prod_{i=1}^5(1 - t^i)} . ] sage: t = var('t') sage: F = br.brat( numerator=1 + 2*t + 4*t^2 + 4*t^3 + 2*t^4 + t^5, denominator=prod(1 - t^i for i in range(1, 6)) ) sage: F (1 + t + 3*t^2 + t^3 + t^4)/((1 - t)^2*(1 - t^3)*(1 - t^4)*(1 - t^5)) sage: F.latex() '\\\\dfrac{1 + t + 3 t^{2} + t^{3} + t^{4}}{(1 - t)^{2}(1 - t^{3})(1 - t^{4})(1 - t^{5})}' .numerator Returns the polynomial in the numerator of the rational function. This is not necessarily reduced. .rational_function Returns the reduced rational function. The underlying type of this object is not a brat . This method should be used if you do not want SageMath to convert to a brat after applying operations to the rational function. .set_denominator Given a polynomial\u2014or data equivalent to a polynomial (see arguments)\u2014returns a new brat , equal to the original, whose denominator is the given polynomial. (Ordered) keyword arguments: expression : the polynomial expression. Default: None . signature : the signature for the polynomial expression. See denominator signature method. Default: None . .subs Given a dictionary of the desired substitutions, return the new brat obtained by performing the substitutions. This works in the same as the subs method for rational functions in SageMath. .top_bottom_multiply Returns a new brat , equal to the original, where the numerator and denominator is multiplied by the given polynomial expression. This is a specialization of the set_denominator method. .variables Returns the variables used in the brat. These are polynomial variables rather than symbolic variables. This is an attribute not a method, so that arguments cannot be passed. Example We define the following rational function using symbolic variables [ f(x,y,z) = \\dfrac{1 + x^2y^2z^2}{(1 - xy)(1 - xz)(1 - yz)} ] sage: x, y, z = var('x y z') sage: f = (1 + x^2*y^2*z^2)/((1 - x*y)*(1 - x*z)*(1 - y*z)) sage: F = br.brat(f) sage: F (1 + x^2*y^2*z^2)/((1 - y*z)*(1 - x*z)*(1 - x*y)) We extract the variables and note that the type of variables have changed to be polynomial variables. sage: varbs = F.variables sage: varbs (x, y, z) sage: type(varbs[0]) <class 'sage.rings.polynomial.multi_polynomial_libsingular.MPolynomial_libsingular'>","title":"brat"},{"location":"brat/#brat","text":"The class we use to format rational functions is brat , and the kinds of rational functions accepted have the form [ \\dfrac{F(\\bm{X})}{C\\cdot \\prod_{i=1}^m(1 - \\bm{X}^{\\alpha_i})}, ] where the following hold: $\\bm{X}=(X_1, \\dots, X_n)$ are variables, $F(\\bm{X})\\in \\mathbb{Q}[\\bm{X}]$, $C\\in \\mathbb{Q}$, $m\\in\\N_0$, $\\alpha_i\\in\\N_0^n$, where $\\bm{X}^{\\alpha_i} = X_1^{\\alpha_{i,1}}\\cdots X_n^{\\alpha_{i,n}}$. The (ordered) keyword arguments for brat are rational_expression : the rational function, numerator : the numerator polynomial of the rational function, denominator : the denominator polynomial of the rational function. Upon construction of a brat , the rational function is simplified. One can use the usual algebraic operations with brat . When adding a brat with something else, we attempt to make another brat object. To \"opt out\", use the method rational_function .","title":"brat"},{"location":"brat/#examples","text":"We expression the rational function [ f(x,y)=\\dfrac{1 + xy + x^2y^2}{(1 - x)(1 - y)}. ] First we write this in the usual way, using symbolic variables. sage: x, y = var('x y') sage: f = (1 + x*y + x^2*y^2)/((1 - x)*(1 - y)) sage: f (x^2*y^2 + x*y + 1)/((x - 1)*(y - 1)) Now we build a brat from $f(x,y)$. sage: F = br.brat(f) sage: F (1 + x*y + x^2*y^2)/((1 - y)*(1 - x)) Now we write the rational function [ g(t) = \\dfrac{1 + 4t + 6t^2 + 4t^3 + t^4}{(1 - t)(1 - t^2)(1 - t^3)(1 - t^4)} . ] sage: t = polygens(QQ, 't')[0] sage: g = (1 + 4*t + 6*t^2 + 4*t^3 + t^4)/((1 - t)*(1 - t^2)*(1 - t^3)*(1 - t^4)) sage: g (t^2 + 2*t + 1)/(t^8 - 3*t^7 + 4*t^6 - 5*t^5 + 6*t^4 - 5*t^3 + 4*t^2 - 3*t + 1) Now we build a brat. sage: G = br.brat(g) sage: G (1 + 2*t - 2*t^3 - t^4)/((1 - t)^3*(1 - t^3)*(1 - t^4))","title":"Examples"},{"location":"brat/#denominator","text":"Returns the polynomial in the denominator of the rational function. This is not necessarily reduced.","title":".denominator"},{"location":"brat/#denominator_signature","text":"Returns the dictionary signature for the denominator. The format of the dictionary is as follows. The keys are \"monomial\": rational number, \"factors\": dictionary with keys given by vectors and values in the positive integers.","title":".denominator_signature"},{"location":"brat/#example","text":"If the variables are ordered as $(x,y,z)$ and the denominator is [ 3\\cdot (1 - x^2y)(1 - y^4)^3(1 - xyz)(1 - x^2)^5 ] Then the dictionary is { \"monomial\": 3 \"factors\": { (2, 1, 0): 1, (0, 4, 0): 3, (1, 1, 1): 1, (2, 0, 0): 5 } } In nearly every situation, the monomial is absorbed to the numerator as a rational multiple. Now we do this in SageMath. sage: x, y, z = polygens(ZZ, 'x,y,z') sage: F = br.brat(1/(3*(1 - x^2*y)*(1 - y^4)^3*(1 - x*y*z)*(1 - x^2)^5)) sage: F (1/3)/((1 - x^2)^5*(1 - x*y*z)*(1 - x^2*y)*(1 - y^4)^3) sage: F.denominator_signature() {'monomial': 1, 'factors': {(2, 0, 0): 5, (0, 4, 0): 3, (1, 1, 1): 1, (2, 1, 0): 1}}","title":"Example"},{"location":"brat/#invert_variables","text":"Returns the corresponding brat after inverting all of the variables and then rewriting the rational function so that all exponents are non-negative.","title":".invert_variables"},{"location":"brat/#latex","text":"Returns a string that formats the brat in $\\LaTeX$ in the '\\dfrac{...}{...}' format. Additional argument: split : If true, returns a pair of strings formatted in $\\LaTeX$: the first is the numerator and the second is the denominator. Default: False .","title":".latex"},{"location":"brat/#example_1","text":"We obtain a $\\LaTeX$ formatting of the following rational function: [ \\dfrac{1 + 2t + 4t^2 + 4t^3 + 2t^4 + t^5}{\\prod_{i=1}^5(1 - t^i)} . ] sage: t = var('t') sage: F = br.brat( numerator=1 + 2*t + 4*t^2 + 4*t^3 + 2*t^4 + t^5, denominator=prod(1 - t^i for i in range(1, 6)) ) sage: F (1 + t + 3*t^2 + t^3 + t^4)/((1 - t)^2*(1 - t^3)*(1 - t^4)*(1 - t^5)) sage: F.latex() '\\\\dfrac{1 + t + 3 t^{2} + t^{3} + t^{4}}{(1 - t)^{2}(1 - t^{3})(1 - t^{4})(1 - t^{5})}'","title":"Example"},{"location":"brat/#numerator","text":"Returns the polynomial in the numerator of the rational function. This is not necessarily reduced.","title":".numerator"},{"location":"brat/#rational_function","text":"Returns the reduced rational function. The underlying type of this object is not a brat . This method should be used if you do not want SageMath to convert to a brat after applying operations to the rational function.","title":".rational_function"},{"location":"brat/#set_denominator","text":"Given a polynomial\u2014or data equivalent to a polynomial (see arguments)\u2014returns a new brat , equal to the original, whose denominator is the given polynomial. (Ordered) keyword arguments: expression : the polynomial expression. Default: None . signature : the signature for the polynomial expression. See denominator signature method. Default: None .","title":".set_denominator"},{"location":"brat/#subs","text":"Given a dictionary of the desired substitutions, return the new brat obtained by performing the substitutions. This works in the same as the subs method for rational functions in SageMath.","title":".subs"},{"location":"brat/#top_bottom_multiply","text":"Returns a new brat , equal to the original, where the numerator and denominator is multiplied by the given polynomial expression. This is a specialization of the set_denominator method.","title":".top_bottom_multiply"},{"location":"brat/#variables","text":"Returns the variables used in the brat. These are polynomial variables rather than symbolic variables. This is an attribute not a method, so that arguments cannot be passed.","title":".variables"},{"location":"brat/#example_2","text":"We define the following rational function using symbolic variables [ f(x,y,z) = \\dfrac{1 + x^2y^2z^2}{(1 - xy)(1 - xz)(1 - yz)} ] sage: x, y, z = var('x y z') sage: f = (1 + x^2*y^2*z^2)/((1 - x*y)*(1 - x*z)*(1 - y*z)) sage: F = br.brat(f) sage: F (1 + x^2*y^2*z^2)/((1 - y*z)*(1 - x*z)*(1 - x*y)) We extract the variables and note that the type of variables have changed to be polynomial variables. sage: varbs = F.variables sage: varbs (x, y, z) sage: type(varbs[0]) <class 'sage.rings.polynomial.multi_polynomial_libsingular.MPolynomial_libsingular'>","title":"Example"}]}